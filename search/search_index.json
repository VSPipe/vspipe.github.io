{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to VSPipe","title":"Home"},{"location":"#welcome-to-vspipe","text":"","title":"Welcome to VSPipe"},{"location":"admin_create_new_project/","text":"Tutorials Create your first project To create a new project, using Project init from project launcher. after click ProjectInit icon a new CMD window will pops up. please key in the folder path that you want to initialize a new project and then press enter. After you press enter the new project will be save to database. Above image is the example for the folder path. this process will produce two files, the \"inventory\" and \"config\" in the new project folder. See Project Inventory API for details on how to manage your .inventory.toml file. See Project Configuration API for details on how to manage your .config.toml file.","title":"Overview"},{"location":"admin_create_new_project/#tutorials","text":"","title":"Tutorials"},{"location":"admin_create_new_project/#create-your-first-project","text":"To create a new project, using Project init from project launcher. after click ProjectInit icon a new CMD window will pops up. please key in the folder path that you want to initialize a new project and then press enter. After you press enter the new project will be save to database. Above image is the example for the folder path. this process will produce two files, the \"inventory\" and \"config\" in the new project folder. See Project Inventory API for details on how to manage your .inventory.toml file. See Project Configuration API for details on how to manage your .config.toml file.","title":"Create your first project"},{"location":"admin_reference/","text":"Reference Database Avalon stores data in two separate locations, on disk and in a database. The separation is made due to performance and search capabilities offered by databases. MongoDB was chosen due to the inherent simplicity and similarity to Python's built-in dictionary type, and performance great enough to enable graphical user interfaces to be built without asynchronousity in mind. Inside of MongoDB, data is stored as Collections containing many Documents. In Avalon, each Collection represents a project and documents make up the Object Model . Asset Subset Version Representation These form a hierarchy, where each contain the latter. Assets make up the top-level object within a project, and can represent anything from characters, shots to levels and more. Asset Description Hulk A bulky fellow Bruce The hero of the film 1000 First shot 1200 Second shot Subsets is the asset broken down into smaller sets of information, such as a rig or a model. Subset Description model Hulk's model rig Hulk's rig lookdev Hulk's look animation Hulk's point cached geometry A subset must have a least one Version, which is typically immutable. Version Comment v001 Initial version v002 Fixed whole in mesh v003 Increased the size of pecs Finally, in each version there is at least one Representation; typically a file or sequence of files. Representation Description ma Maya rig mov Turntable abc Still frame of mesh used in rig Read more about the kinds of objects in Schemas below. Project Inventory API The inventory contains all ASSETs of a project, including metadata. Icon Database .inventory.toml # Mandatory, do not touch schema = \"avalon-core:inventory-1.0\" # Project metadata label = \"The Hulk\" fps = 24 resolution_width = 1920 resolution_height = 1080 # Available assets [[assets]] name = \"Batman\" [[assets]] name = \"Bruce\" label = \"Bruce Wayne\" # (Optional) Nicer name group = \"Character\" # (Optional) Visual grouping icon = \"gear\" # (Optional) Icon from FontAwesome [[assets]] name = \"Camera\" # Available shots [[film]] name = \"1000\" edit_in = 1000 edit_out = 1202 [[film]] name = \"1200\" edit_in = 1000 # Optional metadata per shot edit_out = 1143 The above is an example of an \"inventory\". A complete snapshot of all available assts within a given project, along with optional metadata. Project Configuration API The project configuration contains the applications and tasks available within a given project, along with the template used to create directories. .config.toml # Mandatory, do not touch schema = \"avalon-core:config-1.0\" # Available tasks to choose from. [[tasks]] name = \"modeling\" label = \"Character Modeling\" icon = \"video-camera\" [[tasks]] name = \"animation\" # Available applications to choose from, the name references # the executable API (see below) [[apps]] name = \"maya2016\" label = \"Autodesk Maya 2016\" [[apps]] name = \"python\" label = \"Python 3.6\" args = [\"-u\", \"-c\", \"print('Something nice')\"] # Directory layouts for this project. [template] work = \"{root}/{project}/{silo}/{asset}/work/{task}/{user}/{app}\" publish = \"{root}/{project}/{silo}/{asset}/publish/{subset}/v{version:0>3}/{subset}.{representation}\" The directory layout have the following members available. Member Type Description {app} str The current application directory name, defined in Executable API {task} str Name of the current task {user} str Currently logged on user (provided by getpass.getuser() ) {root} str Absolute path to root directory, e.g. m:\\f01_project {project} str Name of current project {silo} str Name of silo, e.g. assets {asset} str Name of asset, e.g. Bruce {subset} str Name of subset, e.g. modelDefault {version} int Number of version, e.g. 1 {representation} str Name of representation, e.g. ma Project Executable API Every executable must have an associated Application Definition file which looks like this. maya2016.toml # Required header, do not touch. schema = \"avalon-core:application-1.0\" # Name of the created directory, available in the # `template` of the Configuration API application_dir = \"maya\" # These directories will be created under the # given application directory default_dirs = [ \"scenes\", \"data\", \"renderData/shaders\", \"images\" ] # Name displayed in GUIs label = \"Autodesk Maya 2016x64\" # Arguments passed to the executable on launch arguments = [ \"-proj\", \"{AVALON_WORKDIR}\",] # Name of the executable on the local computer. # This name must be available via the users `PATH`. # That is, the user must be able to type this into # the terminal to launch said application. executable = \"maya2016\" description = \"\" # Files copied into the application directory on launch [copy] \"{AVALON_CORE}/res/workspace.mel\" = \"workspace.mel\" # The environment variables overrides any previously set # variables from the parent process. [environment] MAYA_DISABLE_CLIC_IPM = \"Yes\" # Disable the AdSSO process MAYA_DISABLE_CIP = \"Yes\" # Shorten time to boot MAYA_DISABLE_CER = \"Yes\" PYTHONPATH = [ \"{PYBLISH_MAYA}/pyblish_maya/pythonpath\", \"{AVALON_CORE}/avalon/maya/pythonpath\", \"{PYTHONPATH}\" ]","title":"Reference"},{"location":"admin_reference/#reference","text":"","title":"Reference"},{"location":"admin_reference/#database","text":"Avalon stores data in two separate locations, on disk and in a database. The separation is made due to performance and search capabilities offered by databases. MongoDB was chosen due to the inherent simplicity and similarity to Python's built-in dictionary type, and performance great enough to enable graphical user interfaces to be built without asynchronousity in mind. Inside of MongoDB, data is stored as Collections containing many Documents. In Avalon, each Collection represents a project and documents make up the Object Model . Asset Subset Version Representation These form a hierarchy, where each contain the latter. Assets make up the top-level object within a project, and can represent anything from characters, shots to levels and more. Asset Description Hulk A bulky fellow Bruce The hero of the film 1000 First shot 1200 Second shot Subsets is the asset broken down into smaller sets of information, such as a rig or a model. Subset Description model Hulk's model rig Hulk's rig lookdev Hulk's look animation Hulk's point cached geometry A subset must have a least one Version, which is typically immutable. Version Comment v001 Initial version v002 Fixed whole in mesh v003 Increased the size of pecs Finally, in each version there is at least one Representation; typically a file or sequence of files. Representation Description ma Maya rig mov Turntable abc Still frame of mesh used in rig Read more about the kinds of objects in Schemas below.","title":"Database"},{"location":"admin_reference/#project-inventory-api","text":"The inventory contains all ASSETs of a project, including metadata. Icon Database .inventory.toml # Mandatory, do not touch schema = \"avalon-core:inventory-1.0\" # Project metadata label = \"The Hulk\" fps = 24 resolution_width = 1920 resolution_height = 1080 # Available assets [[assets]] name = \"Batman\" [[assets]] name = \"Bruce\" label = \"Bruce Wayne\" # (Optional) Nicer name group = \"Character\" # (Optional) Visual grouping icon = \"gear\" # (Optional) Icon from FontAwesome [[assets]] name = \"Camera\" # Available shots [[film]] name = \"1000\" edit_in = 1000 edit_out = 1202 [[film]] name = \"1200\" edit_in = 1000 # Optional metadata per shot edit_out = 1143 The above is an example of an \"inventory\". A complete snapshot of all available assts within a given project, along with optional metadata.","title":"Project Inventory API"},{"location":"admin_reference/#project-configuration-api","text":"The project configuration contains the applications and tasks available within a given project, along with the template used to create directories. .config.toml # Mandatory, do not touch schema = \"avalon-core:config-1.0\" # Available tasks to choose from. [[tasks]] name = \"modeling\" label = \"Character Modeling\" icon = \"video-camera\" [[tasks]] name = \"animation\" # Available applications to choose from, the name references # the executable API (see below) [[apps]] name = \"maya2016\" label = \"Autodesk Maya 2016\" [[apps]] name = \"python\" label = \"Python 3.6\" args = [\"-u\", \"-c\", \"print('Something nice')\"] # Directory layouts for this project. [template] work = \"{root}/{project}/{silo}/{asset}/work/{task}/{user}/{app}\" publish = \"{root}/{project}/{silo}/{asset}/publish/{subset}/v{version:0>3}/{subset}.{representation}\" The directory layout have the following members available. Member Type Description {app} str The current application directory name, defined in Executable API {task} str Name of the current task {user} str Currently logged on user (provided by getpass.getuser() ) {root} str Absolute path to root directory, e.g. m:\\f01_project {project} str Name of current project {silo} str Name of silo, e.g. assets {asset} str Name of asset, e.g. Bruce {subset} str Name of subset, e.g. modelDefault {version} int Number of version, e.g. 1 {representation} str Name of representation, e.g. ma","title":"Project Configuration API"},{"location":"admin_reference/#project-executable-api","text":"Every executable must have an associated Application Definition file which looks like this. maya2016.toml # Required header, do not touch. schema = \"avalon-core:application-1.0\" # Name of the created directory, available in the # `template` of the Configuration API application_dir = \"maya\" # These directories will be created under the # given application directory default_dirs = [ \"scenes\", \"data\", \"renderData/shaders\", \"images\" ] # Name displayed in GUIs label = \"Autodesk Maya 2016x64\" # Arguments passed to the executable on launch arguments = [ \"-proj\", \"{AVALON_WORKDIR}\",] # Name of the executable on the local computer. # This name must be available via the users `PATH`. # That is, the user must be able to type this into # the terminal to launch said application. executable = \"maya2016\" description = \"\" # Files copied into the application directory on launch [copy] \"{AVALON_CORE}/res/workspace.mel\" = \"workspace.mel\" # The environment variables overrides any previously set # variables from the parent process. [environment] MAYA_DISABLE_CLIC_IPM = \"Yes\" # Disable the AdSSO process MAYA_DISABLE_CIP = \"Yes\" # Shorten time to boot MAYA_DISABLE_CER = \"Yes\" PYTHONPATH = [ \"{PYBLISH_MAYA}/pyblish_maya/pythonpath\", \"{AVALON_CORE}/avalon/maya/pythonpath\", \"{PYTHONPATH}\" ]","title":"Project Executable API"},{"location":"artist_getting_started/","text":"Basic use If you have VSPipe installed and deployed, you can start using it. Ideally you should have VSPipe icon on your desktop or even have your computer set up so VSPipe will start automatically. tip Launchers Launchers can be found in K:\\SES\\Library\\SPEnv\\SPipe_v03\\share directory. They are basically shell scripts running VSPipe. You can create shortcuts on desktop for them for easy VSPipe launching. Starting launchers manually VSPipe launchers runs VSPipe GUI in system tray from which you can work with VSPipe. To use VSPipe, VSPipe launchers must be running. To run VSPipe launchers manually: K:\\SES\\Library\\SPEnv\\SPipe_v03\\master\\SPipeA_Public_v0.01.bat","title":"Overview"},{"location":"artist_getting_started/#basic-use","text":"If you have VSPipe installed and deployed, you can start using it. Ideally you should have VSPipe icon on your desktop or even have your computer set up so VSPipe will start automatically. tip Launchers Launchers can be found in K:\\SES\\Library\\SPEnv\\SPipe_v03\\share directory. They are basically shell scripts running VSPipe. You can create shortcuts on desktop for them for easy VSPipe launching.","title":"Basic use"},{"location":"artist_getting_started/#starting-launchers-manually","text":"VSPipe launchers runs VSPipe GUI in system tray from which you can work with VSPipe. To use VSPipe, VSPipe launchers must be running. To run VSPipe launchers manually: K:\\SES\\Library\\SPEnv\\SPipe_v03\\master\\SPipeA_Public_v0.01.bat","title":"Starting launchers manually"},{"location":"artist_hosts_aftereffects/","text":"Available Tools Work Files Create Load Publish Manage Setup To install the extension download Extension Manager Command Line tool (ExManCmd) . ExManCmd /install {path to pype-setup}/repos/avalon-core/avalon/aftereffects/extension.zxp Usage When you launch AfterEffects you will be met with the Workfiles app. If dont have any previous workfiles, you can just close this window. In AfterEffects you can find the tools in the Avalon extension: You can show the extension panel by going to Window > Extensions > Avalon . Create When you have created an image you want to publish, you will need to create special groups or tag existing groups. To do this open the Creator through the extensions Create button. With the Creator you have a variety of options to create: Check Use selection (A dialog will ask whether you want to create one image per selected layer). Yes. No selection. This will create a single group named after the Subset in the Creator . Single selected layer. The selected layer will be grouped under a single group named after the selected layer. Single selected group. The selected group will be tagged for publishing. Multiple selected items. Each selected group will be tagged for publishing and each layer will be grouped individually. No. All selected layers will be grouped under a single group named after the Subset in the Creator . Uncheck Use selection . This will create a single group named after the Subset in the Creator . Publish When you are ready to share some work, you will need to publish. This is done by opening the Pyblish through the extensions Publish button. This tool will run through checks to make sure the contents you are publishing is correct. Hit the \"Play\" button to start publishing. You may encounter issues with publishing which will be indicated with red squares. If these issues are within the validation section, then you can fix the issue. If there are issues outside of validation section, please let the Pype team know. Repair Validation Issues All validators will give some description about what the issue is. You can inspect this by going into the validator through the arrow: You can expand the errors by clicking on them for more details: Some validator have repair actions, which will fix the issue. If you can identify validators with actions by the circle icon with an \"A\": To access the actions, you right click on the validator. If an action runs successfully, the actions icon will turn green. Once all issues are fixed, you can just hit the \"Refresh\" button and try to publish again. Load When you want to load existing published work, you can load in smart layers through the Loader . You can reach the Loader through the extension's Load button. The supported families for AfterEffects are: image To load an image, right-click on the subset you want and choose a representation: Manage Now that we have some images loaded, we can manage which version is loaded. This is done through the Scene Inventory . You can reach it through the extension's Manage button. :::note Loaded images has to stay as smart layers in order to be updated. If you rasterize the layer, you cannot update it to a different version. ::: You can switch to a previous version of the image or update to the latest.","title":"AfterEffects"},{"location":"artist_hosts_aftereffects/#available-tools","text":"Work Files Create Load Publish Manage","title":"Available Tools"},{"location":"artist_hosts_aftereffects/#setup","text":"To install the extension download Extension Manager Command Line tool (ExManCmd) . ExManCmd /install {path to pype-setup}/repos/avalon-core/avalon/aftereffects/extension.zxp","title":"Setup"},{"location":"artist_hosts_aftereffects/#usage","text":"When you launch AfterEffects you will be met with the Workfiles app. If dont have any previous workfiles, you can just close this window. In AfterEffects you can find the tools in the Avalon extension: You can show the extension panel by going to Window > Extensions > Avalon .","title":"Usage"},{"location":"artist_hosts_aftereffects/#create","text":"When you have created an image you want to publish, you will need to create special groups or tag existing groups. To do this open the Creator through the extensions Create button. With the Creator you have a variety of options to create: Check Use selection (A dialog will ask whether you want to create one image per selected layer). Yes. No selection. This will create a single group named after the Subset in the Creator . Single selected layer. The selected layer will be grouped under a single group named after the selected layer. Single selected group. The selected group will be tagged for publishing. Multiple selected items. Each selected group will be tagged for publishing and each layer will be grouped individually. No. All selected layers will be grouped under a single group named after the Subset in the Creator . Uncheck Use selection . This will create a single group named after the Subset in the Creator .","title":"Create"},{"location":"artist_hosts_aftereffects/#publish","text":"When you are ready to share some work, you will need to publish. This is done by opening the Pyblish through the extensions Publish button. This tool will run through checks to make sure the contents you are publishing is correct. Hit the \"Play\" button to start publishing. You may encounter issues with publishing which will be indicated with red squares. If these issues are within the validation section, then you can fix the issue. If there are issues outside of validation section, please let the Pype team know.","title":"Publish"},{"location":"artist_hosts_aftereffects/#repair-validation-issues","text":"All validators will give some description about what the issue is. You can inspect this by going into the validator through the arrow: You can expand the errors by clicking on them for more details: Some validator have repair actions, which will fix the issue. If you can identify validators with actions by the circle icon with an \"A\": To access the actions, you right click on the validator. If an action runs successfully, the actions icon will turn green. Once all issues are fixed, you can just hit the \"Refresh\" button and try to publish again.","title":"Repair Validation Issues"},{"location":"artist_hosts_aftereffects/#load","text":"When you want to load existing published work, you can load in smart layers through the Loader . You can reach the Loader through the extension's Load button. The supported families for AfterEffects are: image To load an image, right-click on the subset you want and choose a representation:","title":"Load"},{"location":"artist_hosts_aftereffects/#manage","text":"Now that we have some images loaded, we can manage which version is loaded. This is done through the Scene Inventory . You can reach it through the extension's Manage button. :::note Loaded images has to stay as smart layers in order to be updated. If you rasterize the layer, you cannot update it to a different version. ::: You can switch to a previous version of the image or update to the latest.","title":"Manage"},{"location":"artist_hosts_houdini/","text":"Work in progress","title":"Houdini"},{"location":"artist_hosts_maya/","text":"VSPipe global tools Work Files Create Load Manage (Inventory) Publish Library Loader Look Manager Working with VSPipe in Maya Publishing models Intro Publishing models in Maya is pretty straightforward. Create your model as you need. You need to adhere to specifications of your studio that can be different between studios and projects but by default your geometry has to be named properly. For example sphere_GEO or cube1_GEO . Geometry needs to have freezed transformations and must reside under one group, for example model_GRP . Creating instance Now create Model instance from it to let VSPipe know what in the scene you want to publish. Go VSPipe \u2192 Create... \u2192 Model Asset field is a name of asset you are working on - it should be already filled with correct name as you've started Maya or switched context to specific asset. You can edit that field to change it to different asset (but that one must already exists). Subset field is a name you can decide on. It should describe what kind of data you have in the model. For example, you can name it Proxy to indicate that this is low resolution stuff. See Subset . Read-only field just under it show final subset name, adding subset field to name of the group you have selected. Use selection checkbox will use whatever you have selected in Outliner to be wrapped in Model instance. This is usually what you want. Click on Create button. You'll notice then after you've created new Model instance, there is new set in Outliner called after your subset, in our case it is model_WIP . And that's it, you have your first model ready to publish. Now save your scene (if you didn't do it already). You will notice that path in Save dialog is already set to place where scenes related to modeling task on your asset should reside. As in our case we are working on asset called Executioner and on task model , path relative to your project directory will be project_XY/assets/CH/CH_Executioner/work/model . Let's save our scene as CH_Executioner_model_v001 . Publishing models Now let's publish it. Go VSPipe \u2192 Publish... . You will be presented with following window: Note that content of this window can differs by your pipeline configuration. For more detail see Publisher . Items in left column are instances you will be publishing. You can disable them by clicking on square next to them. Green square indicate they are ready for publishing, red means something went wrong either during collection phase or publishing phase. Empty one with gray text is disabled. See that in this case we are publishing from scene file CH_Executioner_model_v001.mb in Maya model named model_WIP (CH_Executioner) . Right column lists all tasks that are run during collection, validation, extraction and integration phase. White items are optional and you can disable them by clicking on them. Lets do dry-run on publishing to see if we pass all validators. Click on flask icon at the bottom. Validators are run. Ideally you will end up with everything green in validator section. Fixing problems To make things interesting, I intentionally forgot to name the group on mesh_Head_Horns as I know it will trigger validator to turn red. You can see our model is now marked red in left column and in right we have red box next to Suffix Naming Conventions validator. You can click on arrow next to it to see more details: From there you can see in Records entry that there is problem with mesh_Head_Horns . Some validators have option to fix problem for you or just select objects that cause trouble. This is the case with our failed validator. In main overview you can notice little up arrow in a circle next to validator name. Right click on it and you can see menu item select invalid . This will select offending object in Maya. Fix is easy. Without closing Publisher window we just rename the group with _GRP suffix. Then we need to reset it to make it notice changes we've made. Click on arrow circle button at the bottom and it will reset Publisher to initial state. Run validators again (flask icon) to see if everything is ok. It should be now. Write some comment if you want and click play icon button when ready. Publish process will now take its course. Depending on data you are publishing it can take a while. You should end up with everything green and message Finished successfully ... You can now close publisher window. To check for yourself that model is published, open Asset Loader - VSPipe \u2192 Load... . There you should see your model, named modelMain . Look development Look development it helps you with versioning different kinds of shaders and easy switching between them. Loading model In this example I have already published model of Executioner. To see how to publish model see Publishing Model . First of lets start with empty scene. Now go VSPipe \u2192 Load... Here I am loading model_WIP , its version 1 for asset Executioner . Just right-click on it and select Reference (ma) . This will load model into scene as ma. Now you can close Loader window. Creating look Now you can create whatever look you want. Assign shaders, textures, etc. to model. In my case, I assigned simple Arnolds aiSurfaceShader and changed its color to red. I am quite happy with it so I want to publish it as my first look. Publishing look Select your model in outliner and ho VSPipe \u2192 Create... . From there select Look . Make sure use selection checkbox is checked. Mine subset name is Main . This will create Look instance with a name look_WIP . Close Creator window. Now save your scene, give it some sensible name. Next, go VSPipe \u2192 Publish . This process is almost identical as publishing models, only different Validators and other plugins will be used. This should be painless and cause no trouble so go ahead, click play icon button at the bottom and it will publish your look. publishing multiple looks You can reference same model into scene multiple times, change materials on every instance with what you need. Then on every model create Look instance . When publishing all those Look instances will be published at same time. Loading looks into models Now lets see how look are applied. Start new empty scene, load your published model there as before (using Reference (abc) ). If you didn't notice until now, there are few yellow icons in left shelf: Those are shortcuts for Look Manager , Work Files , Load , and Manage (Inventory) . You are interested now in Look Manager - first item with brush icon. Select your Executioner model and open Look Manager . This is Look Manager window. Yours would be empty until you click Get All Assets or Get Assets From Selection . You can use later to quick assign looks if you have multiple assets loaded in scene. Click on one of those button now. You should now see all assets and their subsets loaded in scene, and on right side all applicable published looks. Select you asset and on the right side right click on _WIP look. Apply it. You notice that Executioner model is now with texture, materials you've published are now applied to it. That way you can create looks as you want and version them using VSPipe. Setting scene data Maya settings concerning framerate, resolution and frame range are handled by VSPipe. If set correctly in config when initialize new project, Maya will validate you have correct fps on scene save and publishing offering way to fix it for you. For resolution and frame range, use VSPipe \u2192 Reset Frame Range and VSPipe \u2192 Reset Resolution Creating rigs Creating and publishing rigs with VSPipe follows similar workflow as with other data types. Create your rig and mark parts of your hierarchy in sets to help VSPipe validators and extractors to check it and publish it. Preparing rig for publish When creating rigs, it is recommended (and it is in fact enforced by validators) to separate bones or driving objects, their controllers and geometry so they are easily managed. Currently VSPipe doesn't allow to publish model at the same time as its rig so for demonstration purposes, I'll first create simple model for robotic arm, just made out of simple boxes and I'll publish it. For more information about publishing models, see Publishing models . When you've prepared your hierarchy, it's time to create Rig instance . Select your whole rig hierarchy and go VSPipe \u2192 Create... . Select Rig . Set is created in your scene to mark rig parts for export. Notice that it has two subsets - controls_SET and out_SET . Put your controls into controls_SET and geometry to out_SET . You should end up with something like this: Publishing rigs Publishing rig is done in same way as publishing everything else. Save your scene and go VSPipe \u2192 Publish . When you run validation you'll mostly run at first into few issues. Although number of them will seem to be intimidating at first, you'll find out they are mostly minor things easily fixed. Non Duplicate Instance Members (ID) - This will most likely fail because when creating rigs, we usually duplicate few parts of it to reuse them. But duplication will duplicate also ID of original object and VSPipe needs every object to have unique ID. This is easily fixed by Repair action next to validator name. click on little up arrow on right side of validator name and select Repair form menu. Joints Hidden - This is enforcing joints (bones) to be hidden for user as animator usually doesn't need to see them and they clutter his viewports. So well behaving rig should have them hidden. Repair action will help here also. Rig Controllers will check if there are no transforms on unlocked attributes of controllers. This is needed because animator should have ease way to reset rig to it's default position. It also check that those attributes doesn't have any incoming connections from other parts of scene to ensure that published rig doesn't have any missing dependencies. Loading rigs You can load rig with Loader . Go VSPipe \u2192 Load... , select your rig, right click on it and Reference it. Point Maya Ascii Workflow is very similar as other data types. Creating a .ma To create point cache just create whatever hierarchy you want and animate it. Select its root and Go VSPipe \u2192 Create... and select Maya Ascii . After that, publishing will create corresponding ma files. Example setup: Set dressing in Maya Set dressing is term for easily populate complex scenes with individual parts. VSPipe allows to version and manage those sets. Publishing Set dress / Layout Working with Set dresses is very easy. Just load your assets into scene with Loader ( VSPipe \u2192 Load... ). Populate your scene as you wish, translate each piece to fit your need. When ready, select all imported stuff and go VSPipe \u2192 Create... and select Set Dress or Layout . This will create set containing your selection and marking it for publishing. :::note set dress vs layout Currently set dress and layout are functionally identical ::: Now you can publish is with VSPipe \u2192 Publish . Loading Set dress / Layout You can load Set dress / Layout using Loader ( VSPipe \u2192 Load... ). Select you layout or set dress, right click on it and select Reference Maya Ascii (ma) . This will populate your scene with all those models you've put into layout. Rendering The VSPipe supports rendering in Maya and is relatively renderer-agnostic so should work with most renderers. It has been tested and used with Redshift and Arnold (mtoa). We usually refer to this task as lighting. Creating basic render setup If you want to submit your render to farm, just follow these simple steps. Preparing scene Lets start with empty scene. First I'll pull in my favorite Buddha model. VSPipe \u2192 Load... , select model and right+click to pop up context menu. From there just click on Reference (abc) . Next, I want to be sure that I have same frame range as is set on shot I am working on. To do this just VSPipe \u2192 Reset Frame Range . This should set Maya timeline to same values as they are set on shot in Ftrack for example. I have my time set, so lets create some animation. We'll turn Buddha model around for 50 frames (this is length of my timeline). Select model, go to first frame, key Y axis rotation, go to last frame, enter 360 to Channel Editor Y rotation, key it and its done. If you are not sure how to do it, you are probably reading wrong documentation. Now let set up lights, ground and camera. I am lazy so I create Arnolds Skydome light: Arnold \u2192 Lights \u2192 Skydome Light . As ground simple Plane will suffice and I'll set my perspective view as I like and create new camera from it ( CTRL+SHIFT+C ) and rename it from persp1 to mainCamera . One last thing, I'll assign basic aiSurfaceShader to my Buddha and do some little tweaks on it. Submitting renders to Deadline To submit your renders the first thing you'll need to do is create a \"renderglobalsDefault\" instance. This is what the pipeline uses to recognize it needs to process the renderlayers for submission at publish time. You can create it through: Lets create it. Go VSPipe \u2192 Create... . There select Render Globals from list. With the render globals created you can do VSPipe > Publish.. to start submitting your scene. VSPipe will try to connect to render farm and fetch machine pool list. Creating Render instance will also set image prefix in render settings to VSPipe defaults based on renderer you use - for example if you render with Arnold, it is maya/<Scene>/<RenderLayer>/<RenderLayer>_<RenderPass> . There are few setting on Render instance renderglobals_WIP in Attributes Editor : Few options that needs explaining: Primary Pool - here is list of pool fetched from server you can select from. Suspend publish Job - job sent to farm will not start render automatically but is in waiting state. Extend Frames - if checked it will add new frames to previous render, so you can extend previous image sequence. Override Existing Frame - will overwrite file in destination if they exists Priority is priority of job on farm Frames Per Task is number of sequence division between individual tasks (chunks) making one job on farm. Frames List you can submit a sequence as 1-100,300-400 for example. Now if you run publish, you notice there is in right column new item called vspipe.renderlayer and in it there is our new layer Beauty (s001) [150-180] . First part is layer name, second (s001) is asset name and rest is frame range. You see I already tried to run publish but was stopped by few errors. Lets go through them one by one just to see what we need to set up further in scene for successful publish. No Default Cameras Renderable is telling me: Renderable default cameras found: [u'|persp|perspShape'] and so can be resolved by simple change in Main layer render settings. All I have to do is just remove the persp camera from render settings and add there correct camera. This leaves me only with Render Settings error. If I click on it to see details, I see it has problem with animation not being enabled: Animation needs to be enabled. Use the same frame for start and end to render single frame Go to Render Settings , select your render layer and in Common tab change in File Output Frame/Animation ext to whatever you want, just not Single Frame . Set Frame Range Start frame and End frame according your needs. If you run into problems with image file prefix - this should be set correctly when creating Render instance , but you can tweak it. It needs to begin with maya/<Scene> token to avoid render conflicts between DCCs. It needs to have <RenderLayer> and <RenderPass> . If you have more then one renderable cameras, add <Camera> token. Sane default for arnold, redshift or renderman is: maya/<RenderLayer>/<RenderLayer>_<RenderPass> Doing VSPipe \u2192 Reset Resolution will set correct resolution on camera. Scene is now ready for submission and should publish without errors. Tip When publishing is finished, job is created on farm. This job has one more dependent job connected to itself. When render is finished, this other job triggers in and run publish again, but this time it is publishing rendered image sequence.","title":"Maya"},{"location":"artist_hosts_maya/#vspipe-global-tools","text":"Work Files Create Load Manage (Inventory) Publish Library Loader Look Manager","title":"VSPipe global tools"},{"location":"artist_hosts_maya/#working-with-vspipe-in-maya","text":"","title":"Working with VSPipe in Maya"},{"location":"artist_hosts_maya/#publishing-models","text":"","title":"Publishing models"},{"location":"artist_hosts_maya/#intro","text":"Publishing models in Maya is pretty straightforward. Create your model as you need. You need to adhere to specifications of your studio that can be different between studios and projects but by default your geometry has to be named properly. For example sphere_GEO or cube1_GEO . Geometry needs to have freezed transformations and must reside under one group, for example model_GRP .","title":"Intro"},{"location":"artist_hosts_maya/#creating-instance","text":"Now create Model instance from it to let VSPipe know what in the scene you want to publish. Go VSPipe \u2192 Create... \u2192 Model Asset field is a name of asset you are working on - it should be already filled with correct name as you've started Maya or switched context to specific asset. You can edit that field to change it to different asset (but that one must already exists). Subset field is a name you can decide on. It should describe what kind of data you have in the model. For example, you can name it Proxy to indicate that this is low resolution stuff. See Subset . Read-only field just under it show final subset name, adding subset field to name of the group you have selected. Use selection checkbox will use whatever you have selected in Outliner to be wrapped in Model instance. This is usually what you want. Click on Create button. You'll notice then after you've created new Model instance, there is new set in Outliner called after your subset, in our case it is model_WIP . And that's it, you have your first model ready to publish. Now save your scene (if you didn't do it already). You will notice that path in Save dialog is already set to place where scenes related to modeling task on your asset should reside. As in our case we are working on asset called Executioner and on task model , path relative to your project directory will be project_XY/assets/CH/CH_Executioner/work/model . Let's save our scene as CH_Executioner_model_v001 .","title":"Creating instance"},{"location":"artist_hosts_maya/#publishing-models_1","text":"Now let's publish it. Go VSPipe \u2192 Publish... . You will be presented with following window: Note that content of this window can differs by your pipeline configuration. For more detail see Publisher . Items in left column are instances you will be publishing. You can disable them by clicking on square next to them. Green square indicate they are ready for publishing, red means something went wrong either during collection phase or publishing phase. Empty one with gray text is disabled. See that in this case we are publishing from scene file CH_Executioner_model_v001.mb in Maya model named model_WIP (CH_Executioner) . Right column lists all tasks that are run during collection, validation, extraction and integration phase. White items are optional and you can disable them by clicking on them. Lets do dry-run on publishing to see if we pass all validators. Click on flask icon at the bottom. Validators are run. Ideally you will end up with everything green in validator section.","title":"Publishing models"},{"location":"artist_hosts_maya/#fixing-problems","text":"To make things interesting, I intentionally forgot to name the group on mesh_Head_Horns as I know it will trigger validator to turn red. You can see our model is now marked red in left column and in right we have red box next to Suffix Naming Conventions validator. You can click on arrow next to it to see more details: From there you can see in Records entry that there is problem with mesh_Head_Horns . Some validators have option to fix problem for you or just select objects that cause trouble. This is the case with our failed validator. In main overview you can notice little up arrow in a circle next to validator name. Right click on it and you can see menu item select invalid . This will select offending object in Maya. Fix is easy. Without closing Publisher window we just rename the group with _GRP suffix. Then we need to reset it to make it notice changes we've made. Click on arrow circle button at the bottom and it will reset Publisher to initial state. Run validators again (flask icon) to see if everything is ok. It should be now. Write some comment if you want and click play icon button when ready. Publish process will now take its course. Depending on data you are publishing it can take a while. You should end up with everything green and message Finished successfully ... You can now close publisher window. To check for yourself that model is published, open Asset Loader - VSPipe \u2192 Load... . There you should see your model, named modelMain .","title":"Fixing problems"},{"location":"artist_hosts_maya/#look-development","text":"Look development it helps you with versioning different kinds of shaders and easy switching between them.","title":"Look development"},{"location":"artist_hosts_maya/#loading-model","text":"In this example I have already published model of Executioner. To see how to publish model see Publishing Model . First of lets start with empty scene. Now go VSPipe \u2192 Load... Here I am loading model_WIP , its version 1 for asset Executioner . Just right-click on it and select Reference (ma) . This will load model into scene as ma. Now you can close Loader window.","title":"Loading model"},{"location":"artist_hosts_maya/#creating-look","text":"Now you can create whatever look you want. Assign shaders, textures, etc. to model. In my case, I assigned simple Arnolds aiSurfaceShader and changed its color to red. I am quite happy with it so I want to publish it as my first look.","title":"Creating look"},{"location":"artist_hosts_maya/#publishing-look","text":"Select your model in outliner and ho VSPipe \u2192 Create... . From there select Look . Make sure use selection checkbox is checked. Mine subset name is Main . This will create Look instance with a name look_WIP . Close Creator window. Now save your scene, give it some sensible name. Next, go VSPipe \u2192 Publish . This process is almost identical as publishing models, only different Validators and other plugins will be used. This should be painless and cause no trouble so go ahead, click play icon button at the bottom and it will publish your look. publishing multiple looks You can reference same model into scene multiple times, change materials on every instance with what you need. Then on every model create Look instance . When publishing all those Look instances will be published at same time.","title":"Publishing look"},{"location":"artist_hosts_maya/#loading-looks-into-models","text":"Now lets see how look are applied. Start new empty scene, load your published model there as before (using Reference (abc) ). If you didn't notice until now, there are few yellow icons in left shelf: Those are shortcuts for Look Manager , Work Files , Load , and Manage (Inventory) . You are interested now in Look Manager - first item with brush icon. Select your Executioner model and open Look Manager . This is Look Manager window. Yours would be empty until you click Get All Assets or Get Assets From Selection . You can use later to quick assign looks if you have multiple assets loaded in scene. Click on one of those button now. You should now see all assets and their subsets loaded in scene, and on right side all applicable published looks. Select you asset and on the right side right click on _WIP look. Apply it. You notice that Executioner model is now with texture, materials you've published are now applied to it. That way you can create looks as you want and version them using VSPipe.","title":"Loading looks into models"},{"location":"artist_hosts_maya/#setting-scene-data","text":"Maya settings concerning framerate, resolution and frame range are handled by VSPipe. If set correctly in config when initialize new project, Maya will validate you have correct fps on scene save and publishing offering way to fix it for you. For resolution and frame range, use VSPipe \u2192 Reset Frame Range and VSPipe \u2192 Reset Resolution","title":"Setting scene data"},{"location":"artist_hosts_maya/#creating-rigs","text":"Creating and publishing rigs with VSPipe follows similar workflow as with other data types. Create your rig and mark parts of your hierarchy in sets to help VSPipe validators and extractors to check it and publish it.","title":"Creating rigs"},{"location":"artist_hosts_maya/#preparing-rig-for-publish","text":"When creating rigs, it is recommended (and it is in fact enforced by validators) to separate bones or driving objects, their controllers and geometry so they are easily managed. Currently VSPipe doesn't allow to publish model at the same time as its rig so for demonstration purposes, I'll first create simple model for robotic arm, just made out of simple boxes and I'll publish it. For more information about publishing models, see Publishing models . When you've prepared your hierarchy, it's time to create Rig instance . Select your whole rig hierarchy and go VSPipe \u2192 Create... . Select Rig . Set is created in your scene to mark rig parts for export. Notice that it has two subsets - controls_SET and out_SET . Put your controls into controls_SET and geometry to out_SET . You should end up with something like this:","title":"Preparing rig for publish"},{"location":"artist_hosts_maya/#publishing-rigs","text":"Publishing rig is done in same way as publishing everything else. Save your scene and go VSPipe \u2192 Publish . When you run validation you'll mostly run at first into few issues. Although number of them will seem to be intimidating at first, you'll find out they are mostly minor things easily fixed. Non Duplicate Instance Members (ID) - This will most likely fail because when creating rigs, we usually duplicate few parts of it to reuse them. But duplication will duplicate also ID of original object and VSPipe needs every object to have unique ID. This is easily fixed by Repair action next to validator name. click on little up arrow on right side of validator name and select Repair form menu. Joints Hidden - This is enforcing joints (bones) to be hidden for user as animator usually doesn't need to see them and they clutter his viewports. So well behaving rig should have them hidden. Repair action will help here also. Rig Controllers will check if there are no transforms on unlocked attributes of controllers. This is needed because animator should have ease way to reset rig to it's default position. It also check that those attributes doesn't have any incoming connections from other parts of scene to ensure that published rig doesn't have any missing dependencies.","title":"Publishing rigs"},{"location":"artist_hosts_maya/#loading-rigs","text":"You can load rig with Loader . Go VSPipe \u2192 Load... , select your rig, right click on it and Reference it.","title":"Loading rigs"},{"location":"artist_hosts_maya/#point-maya-ascii","text":"Workflow is very similar as other data types.","title":"Point Maya Ascii"},{"location":"artist_hosts_maya/#creating-a-ma","text":"To create point cache just create whatever hierarchy you want and animate it. Select its root and Go VSPipe \u2192 Create... and select Maya Ascii . After that, publishing will create corresponding ma files. Example setup:","title":"Creating a .ma"},{"location":"artist_hosts_maya/#set-dressing-in-maya","text":"Set dressing is term for easily populate complex scenes with individual parts. VSPipe allows to version and manage those sets.","title":"Set dressing in Maya"},{"location":"artist_hosts_maya/#publishing-set-dress-layout","text":"Working with Set dresses is very easy. Just load your assets into scene with Loader ( VSPipe \u2192 Load... ). Populate your scene as you wish, translate each piece to fit your need. When ready, select all imported stuff and go VSPipe \u2192 Create... and select Set Dress or Layout . This will create set containing your selection and marking it for publishing. :::note set dress vs layout Currently set dress and layout are functionally identical ::: Now you can publish is with VSPipe \u2192 Publish .","title":"Publishing Set dress / Layout"},{"location":"artist_hosts_maya/#loading-set-dress-layout","text":"You can load Set dress / Layout using Loader ( VSPipe \u2192 Load... ). Select you layout or set dress, right click on it and select Reference Maya Ascii (ma) . This will populate your scene with all those models you've put into layout.","title":"Loading Set dress / Layout"},{"location":"artist_hosts_maya/#rendering","text":"The VSPipe supports rendering in Maya and is relatively renderer-agnostic so should work with most renderers. It has been tested and used with Redshift and Arnold (mtoa). We usually refer to this task as lighting.","title":"Rendering"},{"location":"artist_hosts_maya/#creating-basic-render-setup","text":"If you want to submit your render to farm, just follow these simple steps.","title":"Creating basic render setup"},{"location":"artist_hosts_maya/#preparing-scene","text":"Lets start with empty scene. First I'll pull in my favorite Buddha model. VSPipe \u2192 Load... , select model and right+click to pop up context menu. From there just click on Reference (abc) . Next, I want to be sure that I have same frame range as is set on shot I am working on. To do this just VSPipe \u2192 Reset Frame Range . This should set Maya timeline to same values as they are set on shot in Ftrack for example. I have my time set, so lets create some animation. We'll turn Buddha model around for 50 frames (this is length of my timeline). Select model, go to first frame, key Y axis rotation, go to last frame, enter 360 to Channel Editor Y rotation, key it and its done. If you are not sure how to do it, you are probably reading wrong documentation. Now let set up lights, ground and camera. I am lazy so I create Arnolds Skydome light: Arnold \u2192 Lights \u2192 Skydome Light . As ground simple Plane will suffice and I'll set my perspective view as I like and create new camera from it ( CTRL+SHIFT+C ) and rename it from persp1 to mainCamera . One last thing, I'll assign basic aiSurfaceShader to my Buddha and do some little tweaks on it.","title":"Preparing scene"},{"location":"artist_hosts_maya/#submitting-renders-to-deadline","text":"To submit your renders the first thing you'll need to do is create a \"renderglobalsDefault\" instance. This is what the pipeline uses to recognize it needs to process the renderlayers for submission at publish time. You can create it through: Lets create it. Go VSPipe \u2192 Create... . There select Render Globals from list. With the render globals created you can do VSPipe > Publish.. to start submitting your scene. VSPipe will try to connect to render farm and fetch machine pool list. Creating Render instance will also set image prefix in render settings to VSPipe defaults based on renderer you use - for example if you render with Arnold, it is maya/<Scene>/<RenderLayer>/<RenderLayer>_<RenderPass> . There are few setting on Render instance renderglobals_WIP in Attributes Editor : Few options that needs explaining: Primary Pool - here is list of pool fetched from server you can select from. Suspend publish Job - job sent to farm will not start render automatically but is in waiting state. Extend Frames - if checked it will add new frames to previous render, so you can extend previous image sequence. Override Existing Frame - will overwrite file in destination if they exists Priority is priority of job on farm Frames Per Task is number of sequence division between individual tasks (chunks) making one job on farm. Frames List you can submit a sequence as 1-100,300-400 for example. Now if you run publish, you notice there is in right column new item called vspipe.renderlayer and in it there is our new layer Beauty (s001) [150-180] . First part is layer name, second (s001) is asset name and rest is frame range. You see I already tried to run publish but was stopped by few errors. Lets go through them one by one just to see what we need to set up further in scene for successful publish. No Default Cameras Renderable is telling me: Renderable default cameras found: [u'|persp|perspShape'] and so can be resolved by simple change in Main layer render settings. All I have to do is just remove the persp camera from render settings and add there correct camera. This leaves me only with Render Settings error. If I click on it to see details, I see it has problem with animation not being enabled: Animation needs to be enabled. Use the same frame for start and end to render single frame Go to Render Settings , select your render layer and in Common tab change in File Output Frame/Animation ext to whatever you want, just not Single Frame . Set Frame Range Start frame and End frame according your needs. If you run into problems with image file prefix - this should be set correctly when creating Render instance , but you can tweak it. It needs to begin with maya/<Scene> token to avoid render conflicts between DCCs. It needs to have <RenderLayer> and <RenderPass> . If you have more then one renderable cameras, add <Camera> token. Sane default for arnold, redshift or renderman is: maya/<RenderLayer>/<RenderLayer>_<RenderPass> Doing VSPipe \u2192 Reset Resolution will set correct resolution on camera. Scene is now ready for submission and should publish without errors. Tip When publishing is finished, job is created on farm. This job has one more dependent job connected to itself. When render is finished, this other job triggers in and run publish again, but this time it is publishing rendered image sequence.","title":"Submitting renders to Deadline"},{"location":"artist_hosts_nuke/","text":"Work in progress","title":"Nuke"},{"location":"artist_hosts_photoshop/","text":"Setup To install the extension download Extension Manager Command Line tool (ExManCmd) . ExManCmd /install {path to pype-setup}/repos/vspipe-core/vspipe/photoshop/extension.zxp Usage When you launch Photoshop you will be met with the Workfiles app. If dont have any previous workfiles, you can just close this window. In Photoshop you can find the tools in the vspipe extension: You can show the extension panel by going to Window > Extensions > vspipe . Create When you have created an image you want to publish, you will need to create special groups or tag existing groups. To do this open the Creator through the extensions Create button. With the Creator you have a variety of options to create: Check Use selection (A dialog will ask whether you want to create one image per selected layer). Yes. No selection. This will create a single group named after the Subset in the Creator . Single selected layer. The selected layer will be grouped under a single group named after the selected layer. Single selected group. The selected group will be tagged for publishing. Multiple selected items. Each selected group will be tagged for publishing and each layer will be grouped individually. No. All selected layers will be grouped under a single group named after the Subset in the Creator . Uncheck Use selection . This will create a single group named after the Subset in the Creator . Publish When you are ready to share some work, you will need to publish. This is done by opening the Pyblish through the extensions Publish button. This tool will run through checks to make sure the contents you are publishing is correct. Hit the \"Play\" button to start publishing. You may encounter issues with publishing which will be indicated with red squares. If these issues are within the validation section, then you can fix the issue. If there are issues outside of validation section, please let the Pype team know. Repair Validation Issues All validators will give some description about what the issue is. You can inspect this by going into the validator through the arrow: You can expand the errors by clicking on them for more details: Some validator have repair actions, which will fix the issue. If you can identify validators with actions by the circle icon with an \"A\": To access the actions, you right click on the validator. If an action runs successfully, the actions icon will turn green. Once all issues are fixed, you can just hit the \"Refresh\" button and try to publish again. Load When you want to load existing published work, you can load in smart layers through the Loader . You can reach the Loader through the extension's Load button. The supported families for Photoshop are: image To load an image, right-click on the subset you want and choose a representation: Manage Now that we have some images loaded, we can manage which version is loaded. This is done through the Scene Inventory . You can reach it through the extension's Manage button. :::note Loaded images has to stay as smart layers in order to be updated. If you rasterize the layer, you cannot update it to a different version. ::: You can switch to a previous version of the image or update to the latest.","title":"Photoshop"},{"location":"artist_hosts_photoshop/#setup","text":"To install the extension download Extension Manager Command Line tool (ExManCmd) . ExManCmd /install {path to pype-setup}/repos/vspipe-core/vspipe/photoshop/extension.zxp","title":"Setup"},{"location":"artist_hosts_photoshop/#usage","text":"When you launch Photoshop you will be met with the Workfiles app. If dont have any previous workfiles, you can just close this window. In Photoshop you can find the tools in the vspipe extension: You can show the extension panel by going to Window > Extensions > vspipe .","title":"Usage"},{"location":"artist_hosts_photoshop/#create","text":"When you have created an image you want to publish, you will need to create special groups or tag existing groups. To do this open the Creator through the extensions Create button. With the Creator you have a variety of options to create: Check Use selection (A dialog will ask whether you want to create one image per selected layer). Yes. No selection. This will create a single group named after the Subset in the Creator . Single selected layer. The selected layer will be grouped under a single group named after the selected layer. Single selected group. The selected group will be tagged for publishing. Multiple selected items. Each selected group will be tagged for publishing and each layer will be grouped individually. No. All selected layers will be grouped under a single group named after the Subset in the Creator . Uncheck Use selection . This will create a single group named after the Subset in the Creator .","title":"Create"},{"location":"artist_hosts_photoshop/#publish","text":"When you are ready to share some work, you will need to publish. This is done by opening the Pyblish through the extensions Publish button. This tool will run through checks to make sure the contents you are publishing is correct. Hit the \"Play\" button to start publishing. You may encounter issues with publishing which will be indicated with red squares. If these issues are within the validation section, then you can fix the issue. If there are issues outside of validation section, please let the Pype team know.","title":"Publish"},{"location":"artist_hosts_photoshop/#repair-validation-issues","text":"All validators will give some description about what the issue is. You can inspect this by going into the validator through the arrow: You can expand the errors by clicking on them for more details: Some validator have repair actions, which will fix the issue. If you can identify validators with actions by the circle icon with an \"A\": To access the actions, you right click on the validator. If an action runs successfully, the actions icon will turn green. Once all issues are fixed, you can just hit the \"Refresh\" button and try to publish again.","title":"Repair Validation Issues"},{"location":"artist_hosts_photoshop/#load","text":"When you want to load existing published work, you can load in smart layers through the Loader . You can reach the Loader through the extension's Load button. The supported families for Photoshop are: image To load an image, right-click on the subset you want and choose a representation:","title":"Load"},{"location":"artist_hosts_photoshop/#manage","text":"Now that we have some images loaded, we can manage which version is loaded. This is done through the Scene Inventory . You can reach it through the extension's Manage button. :::note Loaded images has to stay as smart layers in order to be updated. If you rasterize the layer, you cannot update it to a different version. ::: You can switch to a previous version of the image or update to the latest.","title":"Manage"},{"location":"artist_launcher/","text":"Launcher will list all the projects registered in the vspipe database, the entry point of vspipe projects. Note The program will not end after the window is closed, it will stay in the taskbar in the lower right corner. To close it completely, right-click on the VSPipe icon in the taskbar and click Quit","title":"Launcher"},{"location":"artist_tools/","text":"Creator Details Despite the name, Creator isn't for making new content in your scene, but rather taking what's already in it and creating all the metadata your content needs to be published. Usage select what you want to publish from your scenes Open Creator from VSPipe menu Choose what family (data type) you need to export Type the name for you export. This name is how others are going to be able to refer to this particular subset when loading it into their scenes. Every assets should have a _MAIN, _FIN and _WIP subset, but can have any number of other variants. Click on Create Loader Loader loads published subsets into your current scene or script. Usage open Loader from VSPipe menu select the asset where the subset you want to load is published from subset list select the subset you want right-click the subset from action menu select what you want to do (load, reference, ...) Refresh data Data are not auto-refreshed to avoid database issues. To refresh assets or subsets press refresh button. Load another version Loader by default load last version, but you can of course load another versions. Double-click on the subset in the version column to expose the drop down, choose version you want to load and continue from point 4 of the Usage . Filtering Filter Assets and Subsets by name To filter assets/subsets by name just type name or part of name to filter text input. Only assets/subsets containing the entered string remain. Assets filtering example (it works the same for subsets) : Filter Subsets by Family To filter subsets by their families you can use families list where you can check families you want to see or uncheck families you are not interested in. Publisher Note Use publish to share your work with others. It collects, validates and exports the data in standardized way. Details When you run pyblish, the UI is made of 2 main parts. On the left, you see all the items pyblish will be working with (called instances), and on the right a list of actions that are going to process these items. Even though every task type has some pre-defined settings of what should be collected from the scene and what items will be published by default. You can technically publish any output type from any task type. Each item is passed through multiple plugins, each doing a small piece of work. These are organized into 4 areas and run in sequence. Using Pyblish In the best case scenario, you open pyblish from the VSPipe menu, press play, wait for it to finish, and you\u2019re done. These are the steps in detail, for cases, where the default settings don\u2019t work for you or you know that the task you\u2019re working on, requires a different treatment. Collect Finds all the important data in the scene and makes it ready for publishing Validate Each validator makes sure your output complies to one particular condition. This could be anything from naming conventions, scene setting, to plugin usage. An item can only be published if all validators pass. Extract Extractor takes the item and saves it to the disk. Usually to temporary location. Each extractor represents one file format and there can be multiple file formats exported for each item. Integrate Integrator takes the extracted files, categorizes and moves them to a correct location on the disk or on the server. Inventory With Scene Inventory, you can browse, update and change subsets loaded with Loader into your scene or script. Details Once a subset is loaded, it turns into a container within a scene. This containerization allows us to have a good overview of everything in the scene, but also makes it possible to change versions, notify user if something is outdated, replace one asset for another, etc. The scene manager has a simple GUI focused on efficiency. You can see everything that has been previously loaded into the scene, how many time it's been loaded, what version and a lot of other information. Loaded assets are grouped by their asset name, subset name and representation. This grouping gives ability to apply changes for all instances of the loaded asset (e.g. when tree is loaded 20 times you can easily update version for all of them) . To interact with any container, you need to right click it and you'll see a drop down with possible actions. The key actions for production are already implemented, but more will be added over time. Usage Change version You can change versions of loaded subsets with scene inventory tool. Version of loaded assets is colored to red when newer version is available. Update to the latest version Select containers or subsets you want to update, right-click selection and press Update to latest . Change to specific version Select containers or subsets you want to change, right-click selection, press Set version , select from dropdown version you want change to and press OK button to confirm. Switch Asset It's tool in Scene inventory tool that gives ability to switch asset, subset and representation of loaded assets. Because loaded asset is in fact representation of version published in asset's subset it is possible to switch each of this part (representation, version, subset and asset) , but with limitations. Limitations are obvious as you can imagine when you have loaded .ma representation of modelMain subset from car asset it is not possible to switch subset to modelHD and keep same representation if modelHD does not have published .ma representation. It is possible to switch multiple loaded assets at once that makes this tool very powerful helper if all published assets contain same subsets and representations. Remove Asset You can remove Loaded item by right click then remove items. Filtering Filter by name There is a search bar on the top for cases when you have a complex scene with many assets and need to find a specific one. Filter with Cherry-pick selection To keep only selected subsets right-click selection and press Cherry-Pick (Hierarchy) (Border of subset list change to orange color when Cherry-pick filtering is set so you know filter is applied). To return to original state right-click anywhere in subsets list and press Back to Full-View . TIP You can Cherry-pick from Cherry-picked subsets. Workfiles Save new working scenes or scripts, or open the ones you previously worked on. Details Instead of digging through your software native file browser, you can simply open the workfiles app and see all the files for the asset or shot you're currently working with. The app takes care of all the naming and the location of your work files. When saving a scene you can also add a comment. It is completely up to you how you use this, however we recommend using it for subversion within your current working version. Let's say that the last version of the comp you published was v003 and now you're working on the file prj_sh010_compositing_v004.nk if you want to keep snapshots of your work, but not iterate on the main version because the supervisor is expecting next publish to be v004, you can use the comment to do this, so you can save the file under the name prj_sh010_compositing_v004_001 , prj_sh010_compositing_v004_002. the main version is automatically iterated every time you publish something. Usage To open existing file: Open Workfiles tool from VSPipe menu Select file from list - the latest version is the highest (descendent ordering) Press Open button or double click To save new workfile Open Workfiles tool from VSPipe menu Press Save As button You can add optional comment to the filename, that will be appended at the end Press OK TIP You can manually override the workfile version by unticking next available version and using the version menu to choose your own. Look Manager The Look Manager takes care of assigning published looks to the correct model in the scene. Details When a look is published it also stores the information about what shading networks need to be assigned to which models, but it also stores all the render attributes on the mesh necessary for a successful render. Usage Look Assigner has GUI is made of two parts. On the left you will see the list of all the available models in the scene and on the right side, all the looks that can be associate with them. To assign a look to a model you just need to: Open Look Manager tool from VSPipe_Tools menu under Shading select Look Manager Click on \"Get All Assets\" Choose a subset from the menu on the left Right click on a look from the list on the right Choose \"Assign looks\" At this point you should have a model with all it's shaders applied correctly. The tool automatically loads the latest look available.","title":"Tools"},{"location":"artist_tools/#creator","text":"","title":"Creator"},{"location":"artist_tools/#details","text":"Despite the name, Creator isn't for making new content in your scene, but rather taking what's already in it and creating all the metadata your content needs to be published.","title":"Details"},{"location":"artist_tools/#usage","text":"select what you want to publish from your scenes Open Creator from VSPipe menu Choose what family (data type) you need to export Type the name for you export. This name is how others are going to be able to refer to this particular subset when loading it into their scenes. Every assets should have a _MAIN, _FIN and _WIP subset, but can have any number of other variants. Click on Create","title":"Usage"},{"location":"artist_tools/#loader","text":"Loader loads published subsets into your current scene or script.","title":"Loader"},{"location":"artist_tools/#usage_1","text":"open Loader from VSPipe menu select the asset where the subset you want to load is published from subset list select the subset you want right-click the subset from action menu select what you want to do (load, reference, ...)","title":"Usage"},{"location":"artist_tools/#refresh-data","text":"Data are not auto-refreshed to avoid database issues. To refresh assets or subsets press refresh button.","title":"Refresh data"},{"location":"artist_tools/#load-another-version","text":"Loader by default load last version, but you can of course load another versions. Double-click on the subset in the version column to expose the drop down, choose version you want to load and continue from point 4 of the Usage .","title":"Load another version"},{"location":"artist_tools/#filtering","text":"","title":"Filtering"},{"location":"artist_tools/#filter-assets-and-subsets-by-name","text":"To filter assets/subsets by name just type name or part of name to filter text input. Only assets/subsets containing the entered string remain. Assets filtering example (it works the same for subsets) :","title":"Filter Assets and Subsets by name"},{"location":"artist_tools/#filter-subsets-by-family","text":"To filter subsets by their families you can use families list where you can check families you want to see or uncheck families you are not interested in.","title":"Filter Subsets by Family"},{"location":"artist_tools/#publisher","text":"Note Use publish to share your work with others. It collects, validates and exports the data in standardized way.","title":"Publisher"},{"location":"artist_tools/#details_1","text":"When you run pyblish, the UI is made of 2 main parts. On the left, you see all the items pyblish will be working with (called instances), and on the right a list of actions that are going to process these items. Even though every task type has some pre-defined settings of what should be collected from the scene and what items will be published by default. You can technically publish any output type from any task type. Each item is passed through multiple plugins, each doing a small piece of work. These are organized into 4 areas and run in sequence.","title":"Details"},{"location":"artist_tools/#using-pyblish","text":"In the best case scenario, you open pyblish from the VSPipe menu, press play, wait for it to finish, and you\u2019re done. These are the steps in detail, for cases, where the default settings don\u2019t work for you or you know that the task you\u2019re working on, requires a different treatment.","title":"Using Pyblish"},{"location":"artist_tools/#collect","text":"Finds all the important data in the scene and makes it ready for publishing","title":"Collect"},{"location":"artist_tools/#validate","text":"Each validator makes sure your output complies to one particular condition. This could be anything from naming conventions, scene setting, to plugin usage. An item can only be published if all validators pass.","title":"Validate"},{"location":"artist_tools/#extract","text":"Extractor takes the item and saves it to the disk. Usually to temporary location. Each extractor represents one file format and there can be multiple file formats exported for each item.","title":"Extract"},{"location":"artist_tools/#integrate","text":"Integrator takes the extracted files, categorizes and moves them to a correct location on the disk or on the server.","title":"Integrate"},{"location":"artist_tools/#inventory","text":"With Scene Inventory, you can browse, update and change subsets loaded with Loader into your scene or script.","title":"Inventory"},{"location":"artist_tools/#details_2","text":"Once a subset is loaded, it turns into a container within a scene. This containerization allows us to have a good overview of everything in the scene, but also makes it possible to change versions, notify user if something is outdated, replace one asset for another, etc. The scene manager has a simple GUI focused on efficiency. You can see everything that has been previously loaded into the scene, how many time it's been loaded, what version and a lot of other information. Loaded assets are grouped by their asset name, subset name and representation. This grouping gives ability to apply changes for all instances of the loaded asset (e.g. when tree is loaded 20 times you can easily update version for all of them) . To interact with any container, you need to right click it and you'll see a drop down with possible actions. The key actions for production are already implemented, but more will be added over time.","title":"Details"},{"location":"artist_tools/#usage_2","text":"","title":"Usage"},{"location":"artist_tools/#change-version","text":"You can change versions of loaded subsets with scene inventory tool. Version of loaded assets is colored to red when newer version is available.","title":"Change version"},{"location":"artist_tools/#update-to-the-latest-version","text":"Select containers or subsets you want to update, right-click selection and press Update to latest .","title":"Update to the latest version"},{"location":"artist_tools/#change-to-specific-version","text":"Select containers or subsets you want to change, right-click selection, press Set version , select from dropdown version you want change to and press OK button to confirm.","title":"Change to specific version"},{"location":"artist_tools/#switch-asset","text":"It's tool in Scene inventory tool that gives ability to switch asset, subset and representation of loaded assets. Because loaded asset is in fact representation of version published in asset's subset it is possible to switch each of this part (representation, version, subset and asset) , but with limitations. Limitations are obvious as you can imagine when you have loaded .ma representation of modelMain subset from car asset it is not possible to switch subset to modelHD and keep same representation if modelHD does not have published .ma representation. It is possible to switch multiple loaded assets at once that makes this tool very powerful helper if all published assets contain same subsets and representations.","title":"Switch Asset"},{"location":"artist_tools/#remove-asset","text":"You can remove Loaded item by right click then remove items.","title":"Remove Asset"},{"location":"artist_tools/#filtering_1","text":"","title":"Filtering"},{"location":"artist_tools/#filter-by-name","text":"There is a search bar on the top for cases when you have a complex scene with many assets and need to find a specific one.","title":"Filter by name"},{"location":"artist_tools/#filter-with-cherry-pick-selection","text":"To keep only selected subsets right-click selection and press Cherry-Pick (Hierarchy) (Border of subset list change to orange color when Cherry-pick filtering is set so you know filter is applied). To return to original state right-click anywhere in subsets list and press Back to Full-View . TIP You can Cherry-pick from Cherry-picked subsets.","title":"Filter with Cherry-pick selection"},{"location":"artist_tools/#workfiles","text":"Save new working scenes or scripts, or open the ones you previously worked on.","title":"Workfiles"},{"location":"artist_tools/#details_3","text":"Instead of digging through your software native file browser, you can simply open the workfiles app and see all the files for the asset or shot you're currently working with. The app takes care of all the naming and the location of your work files. When saving a scene you can also add a comment. It is completely up to you how you use this, however we recommend using it for subversion within your current working version. Let's say that the last version of the comp you published was v003 and now you're working on the file prj_sh010_compositing_v004.nk if you want to keep snapshots of your work, but not iterate on the main version because the supervisor is expecting next publish to be v004, you can use the comment to do this, so you can save the file under the name prj_sh010_compositing_v004_001 , prj_sh010_compositing_v004_002. the main version is automatically iterated every time you publish something.","title":"Details"},{"location":"artist_tools/#usage_3","text":"","title":"Usage"},{"location":"artist_tools/#to-open-existing-file","text":"Open Workfiles tool from VSPipe menu Select file from list - the latest version is the highest (descendent ordering) Press Open button or double click","title":"To open existing file:"},{"location":"artist_tools/#to-save-new-workfile","text":"Open Workfiles tool from VSPipe menu Press Save As button You can add optional comment to the filename, that will be appended at the end Press OK TIP You can manually override the workfile version by unticking next available version and using the version menu to choose your own.","title":"To save new workfile"},{"location":"artist_tools/#look-manager","text":"The Look Manager takes care of assigning published looks to the correct model in the scene.","title":"Look Manager"},{"location":"artist_tools/#details_4","text":"When a look is published it also stores the information about what shading networks need to be assigned to which models, but it also stores all the render attributes on the mesh necessary for a successful render.","title":"Details"},{"location":"artist_tools/#usage_4","text":"Look Assigner has GUI is made of two parts. On the left you will see the list of all the available models in the scene and on the right side, all the looks that can be associate with them. To assign a look to a model you just need to: Open Look Manager tool from VSPipe_Tools menu under Shading select Look Manager Click on \"Get All Assets\" Choose a subset from the menu on the left Right click on a look from the list on the right Choose \"Assign looks\" At this point you should have a model with all it's shaders applied correctly. The tool automatically loads the latest look available.","title":"Usage"}]}